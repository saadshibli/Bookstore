// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Firebase UID is the link between our DB and Firebase Auth
model User {
  id          String    @id @default(uuid())
  firebaseUid String    @unique
  email       String?   @unique
  phoneNumber String?   @unique
  name        String?
  role        Role      @default(CUSTOMER)
  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  wishlist    WishlistItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(uuid())
  title           String
  description     String
  author          String
  isbn            String?   @unique
  price           Float
  stockQuantity   Int       @default(0)
  publisher       String?
  // Add more models like Category and link them here
  reviews         Review[]
  wishlistItems   WishlistItem[]
  orderItems      OrderItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  items           OrderItem[]
  razorpayOrderId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id])
  orderId         String
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
  priceAtPurchase Float // Price of the product when the order was placed
}

model Address {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  orders    Order[] // An address can be used for multiple orders
}

model WishlistItem {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // A user can only wishlist a product once
}



model Review {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  rating      Int      // Should be between 1 and 5
  comment     String?
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}